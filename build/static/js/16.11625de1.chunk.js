(this["webpackJsonpcrypter-nft"]=this["webpackJsonpcrypter-nft"]||[]).push([[16],{1578:function(t,e,n){"use strict";t.exports=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.mustBeMetaMask,n=void 0!==e&&e,r=t.silent,a=void 0!==r&&r,i=t.timeout,s=void 0===i?3e3:i;c();var o=!1;return new Promise((function(t){function e(){if(!o){o=!0,window.removeEventListener("ethereum#initialized",e);var r=window.ethereum;if(!r||n&&!r.isMetaMask){var i=n&&r?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!a&&console.error("@metamask/detect-provider:",i),t(null)}else t(r)}}window.ethereum?e():(window.addEventListener("ethereum#initialized",e,{once:!0}),setTimeout((function(){e()}),s))}));function c(){if("boolean"!==typeof n)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!==typeof a)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!==typeof s)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}}},1667:function(t,e,n){"use strict";n.r(e),n.d(e,"MetamaskAdapter",(function(){return w}));var r=n(2),a=n.n(r),i=n(9),s=n(3),o=n(5),c=n(18),h=n(20),u=n(19),d=n(7),m=n(8),p=n(26),l=n.n(p),f=n(1578),v=n.n(f),k=n(17),w=function(t){Object(d.a)(n,t);var e=Object(m.a)(n);function n(){var t;Object(s.a)(this,n);var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t=e.call(this),l()(Object(c.a)(t),"adapterNamespace",k.c.EIP155),l()(Object(c.a)(t),"currentChainNamespace",k.f.EIP155),l()(Object(c.a)(t),"type",k.a.EXTERNAL),l()(Object(c.a)(t),"name",k.i.METAMASK),l()(Object(c.a)(t),"status",k.d.NOT_READY),l()(Object(c.a)(t),"rehydrated",!1),l()(Object(c.a)(t),"metamaskProvider",null),t.chainConfig=r.chainConfig||null,t}return Object(o.a)(n,[{key:"provider",get:function(){return this.status===k.d.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null},set:function(t){throw new Error("Not implemented")}},{key:"init",value:function(){var t=Object(i.a)(a.a.mark((function t(e){return a.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return Object(h.a)(Object(u.a)(n.prototype),"checkInitializationRequirements",this).call(this),t.next=3,v()({mustBeMetaMask:!0});case 3:if(this.metamaskProvider=t.sent,this.metamaskProvider){t.next=6;break}throw k.j.notInstalled("Metamask extension is not installed");case 6:if(this.status=k.d.READY,this.emit(k.b.READY,k.i.METAMASK),t.prev=8,!e.autoConnect){t.next=13;break}return this.rehydrated=!0,t.next=13,this.connect();case 13:t.next=18;break;case 15:t.prev=15,t.t0=t.catch(8),this.emit(k.b.ERRORED,t.t0);case 18:case"end":return t.stop()}}),t,this,[[8,15]])})));return function(e){return t.apply(this,arguments)}}()},{key:"setAdapterSettings",value:function(t){}},{key:"connect",value:function(){var t=Object(i.a)(a.a.mark((function t(){var e=this;return a.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(Object(h.a)(Object(u.a)(n.prototype),"checkConnectionRequirements",this).call(this),this.chainConfig||(this.chainConfig=Object(k.m)(k.f.EIP155,1)),this.status=k.d.CONNECTING,this.emit(k.b.CONNECTING,{adapter:k.i.METAMASK}),this.metamaskProvider){t.next=6;break}throw k.k.notConnectedError("Not able to connect with metamask");case 6:return t.prev=6,t.next=9,this.metamaskProvider.request({method:"eth_requestAccounts"});case 9:if(this.metamaskProvider.chainId===this.chainConfig.chainId){t.next=13;break}return t.next=13,this.switchChain(this.chainConfig);case 13:if(this.status=k.d.CONNECTED,this.provider){t.next=16;break}throw k.k.notConnectedError("Failed to connect with provider");case 16:return this.provider.once("disconnect",(function(){e.disconnect()})),this.emit(k.b.CONNECTED,{adapter:k.i.METAMASK,reconnected:this.rehydrated}),t.abrupt("return",this.provider);case 21:throw t.prev=21,t.t0=t.catch(6),this.status=k.d.READY,this.rehydrated=!1,this.emit(k.b.ERRORED,t.t0),k.k.connectionError("Failed to login with metamask wallet");case 27:case"end":return t.stop()}}),t,this,[[6,21]])})));return function(){return t.apply(this,arguments)}}()},{key:"disconnect",value:function(){var t=Object(i.a)(a.a.mark((function t(){var e,n,r=arguments;return a.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=r.length>0&&void 0!==r[0]?r[0]:{cleanup:!1},this.status===k.d.CONNECTED){t.next=3;break}throw k.k.disconnectionError("Not connected with wallet");case 3:null===(e=this.provider)||void 0===e||e.removeAllListeners(),n.cleanup?(this.status=k.d.NOT_READY,this.metamaskProvider=null):this.status=k.d.READY,this.rehydrated=!1,this.emit(k.b.DISCONNECTED);case 7:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}()},{key:"getUserInfo",value:function(){var t=Object(i.a)(a.a.mark((function t(){return a.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.status===k.d.CONNECTED){t.next=2;break}throw k.k.notConnectedError("Not connected with wallet, Please login/connect first");case 2:return t.abrupt("return",{});case 3:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}()},{key:"switchChain",value:function(){var t=Object(i.a)(a.a.mark((function t(e){return a.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this.metamaskProvider){t.next=2;break}throw k.k.notConnectedError("Not connected with wallet");case 2:return t.prev=2,t.next=5,this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:e.chainId}]});case 5:t.next=15;break;case 7:if(t.prev=7,t.t0=t.catch(2),4902!==t.t0.code){t.next=14;break}return t.next=12,this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:e.chainId,chainName:e.displayName,rpcUrls:[e.rpcTarget]}]});case 12:t.next=15;break;case 14:throw t.t0;case 15:case"end":return t.stop()}}),t,this,[[2,7]])})));return function(e){return t.apply(this,arguments)}}()}]),n}(k.e)}}]);
//# sourceMappingURL=16.11625de1.chunk.js.map